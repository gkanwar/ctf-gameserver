#!/usr/bin/env python3

import argparse
import asyncio
import asyncio.subprocess
import base64
import codecs
import datetime
import logging
import os
import signal
import sys

import psycopg2

from ctf_gameserver.lib import daemon, flag
from ctf_gameserver.lib.args import get_arg_parser_with_db
from ctf_gameserver.checker import string_to_result

MAXRUNTIME = datetime.timedelta(minutes=3)
conteststart = None
flagvalidity = None
tickduration = None
open_tasks = dict()
stopping = False
serviceid = None

#pylint: disable=unused-argument
def handle_stop(signum, frame):
    global stopping
    stopping = True
    logging.warning("Received signal, stopping the checkermaster gracefully")


def do_store(line, dbconnection, service, team):
    with dbconnection:
        with dbconnection.cursor() as cursor:
            ident = line[1]
            data = psycopg2.Binary(base64.b64decode(line[2]))

            # TODO: think about proper on conflict replace
            cursor.execute("""DELETE FROM checkerstate
                              WHERE service_id = %s AND team_id = %s AND identifier = %s""",
                           (service, team, ident))
            cursor.execute("""INSERT INTO checkerstate
                                 (service_id,team_id,identifier,data)
                              VALUES
                                 (%s, %s, %s, %s)""",
                           (service, team, ident, data))


def do_retrieve(line, dbconnection, service, team):
    with dbconnection:
        with dbconnection.cursor() as cursor:
            ident = line[1]
            cursor.execute("""SELECT data FROM checkerstate
                              WHERE team_id = %s
                                AND service_id = %s
                                AND identifier = %s""",
                           (team, service, ident))
            data = cursor.fetchone()
    if data != None:
        data, = data
        data = base64.b64encode(data)
        return data
    return b""


def do_flag(line, service, team, secret):
    tick = int(line[1])
    timestamp = conteststart.timestamp() + (flagvalidity + tick) * tickduration
    payload = None
    if len(line) > 2:
        payload = codecs.decode(line[2], 'hex')
    newflag = flag.generate(team=team, service=service, secret=secret,
                            payload=payload, timestamp=timestamp)
    return newflag


@asyncio.coroutine
def run_checker(service, team, tick, checker, ippattern, loglevel, dbconnection, secret, journald_arg,
                gelf_server_arg):
    logger = logging.getLogger("service%02d-team%03d-tick%03d" % (service, team, tick))
    logger.info("running checker")
    result = None
    subenv = dict(os.environ)
    subenv['CHECKER_CONTEST'] = ''

    checkerslave_args = [
        "--service", str(service),
        "--team", str(team),
        "--tick", str(tick),
        "--loglevel", logging.getLevelName(loglevel),
        "--ip", ippattern % team
    ]
    if journald_arg:
        checkerslave_args.append('--journald')
    if gelf_server_arg is not None:
        checkerslave_args.extend(['--gelf-server', gelf_server_arg])

    process = yield from asyncio.create_subprocess_exec("ctf-checkerslave",
                                                        *checkerslave_args,
                                                        checker,
                                                        env=subenv,
                                                        stdout=asyncio.subprocess.PIPE,
                                                        stderr=asyncio.subprocess.PIPE,
                                                        stdin=asyncio.subprocess.PIPE)

    logger.debug(repr(process))
    while True:
        try:
            line = yield from process.stdout.readline()
            if process.returncode is not None:
                logger.warning(repr(process.returncode))

            if line == b'':
                err = yield from process.stderr.read()
                logger.warning(err.decode("utf-8"))
                return

            logger.debug(repr(line))
            line = line.decode('us-ascii').split()
            logging.debug(repr(line))

            if "FLAG" == line[0]:
                newflag = do_flag(line, service, team, secret)
                process.stdin.write(newflag.encode('us-ascii'))
                process.stdin.write(b"\n")

            elif "STORE" == line[0]:
                try:
                    do_store(line, dbconnection, service, team)
                    process.stdin.write(b"OK\n")
                except Exception:
                    process.stdin.write(b"FAIL\n")
                    logger.exception("Database store failed")

            elif "RETRIEVE" == line[0]:
                try:
                    data = do_retrieve(line, dbconnection, service, team)
                    process.stdin.write(data + b"\n")

                except Exception:
                    process.stdin.write(b"\n")
                    logger.exception("Database get failed")

            elif line[0] in ["OK", "TIMEOUT", "NOTWORKING", "NOTFOUND", "RECOVERING"]:
                result = line[0]
                break
        except ValueError:
            logging.exception("Exception while communicating with checkerslave")
            break

    try:
        process.terminate()
    except ProcessLookupError:
        pass

    logger.info("checker finished with result %s", result)
    return result


def get_fresh_jobs(gamedb, statedb, args):
    global stopping

    daemon.notify("WATCHDOG=1")
    loop = asyncio.get_event_loop()
    loop.call_later(args.refresh, get_fresh_jobs, gamedb, statedb, args)

    tasks = list(open_tasks.keys())
    for task in tasks:
        service, team, tick, starttime = open_tasks[task]
        if task.cancelled():
            del open_tasks[task]

        elif task.done():
            try:
                if task.result() is None:
                    logging.warning("Checkerscript failed for Team %d Tick %d", team, tick)
                else:
                    result = string_to_result(task.result())
                    with gamedb:
                        with gamedb.cursor() as cursor:
                            cursor.execute("""INSERT INTO scoring_statuscheck
                                                 (service_id, team_id, tick, status, timestamp)
                                              VALUES
                                                 (%s, %s, %s, %s, now())""",
                                           (service, team, tick, result))
                            cursor.execute("""UPDATE scoring_flag
                                              SET placement_end = now()
                                              WHERE service_id = %s
                                                AND protecting_team_id = %s
                                                AND tick = %s""",
                                           (service, team, tick))
                del open_tasks[task]
            except psycopg2.InterfaceError:
                stopping = True
                logging.warning("Database connection closed, restarting checkermaster")

            except Exception:
                logging.exception("Exception while trying to update service status in database")

        elif starttime + MAXRUNTIME < datetime.datetime.now():
            logging.warning("aborting job(service=%d, team=%d, tick=%d) due to timeout",
                            service, team, tick)
            task.cancel()

    current_tasks = len(open_tasks)

    if stopping:
        if current_tasks == 0:
            sys.exit(0)
        else:
            return

    new_tasks = args.maxtasks - current_tasks
    if new_tasks < args.minstart:
        new_tasks = args.minstart
    elif new_tasks > args.maxstart:
        new_tasks = args.maxstart

    logging.info("Currently running %d tasks, starting up to %d fresh ones",
                 current_tasks, new_tasks)

    try:
        jobs = []
        with gamedb:
            with gamedb.cursor() as cursor:
                cursor.execute("""SELECT
                                       sc.id, protecting_team_id, sc.tick
                                  FROM scoring_flag sc, scoring_gamecontrol gc
                                  WHERE placement_start is NULL
                                    AND sc.tick = gc.current_tick
                                    AND sc.service_id = %s
                                  ORDER BY RANDOM()
                                  LIMIT %s
                                  FOR UPDATE OF sc """,
                               (serviceid, new_tasks))
                jobs = cursor.fetchall()
                cursor.executemany("""UPDATE scoring_flag
                                      SET placement_start = now()
                                      WHERE id = %s""",
                                   [ (job[0],) for job in jobs ])

        for _, team, tick in jobs:
            service = serviceid
            checker = args.checker
            ippattern = args.ippattern
            task = loop.create_task(run_checker(service, team, tick, checker, ippattern,
                                                logging.getLogger().level, statedb,
                                                base64.b64decode(args.secret), args.journald,
                                                args.gelf_server))
            open_tasks[task] = service, team, tick, datetime.datetime.now()
        logging.info("started %d (of %d possible) new jobs", len(jobs), new_tasks)

    except psycopg2.InterfaceError:
        stopping = True
        logging.warning("Database connection closed, restarting checkermaster")

    except Exception:
        logging.exception("Exception while trying to get new jobs")


def main():
    logging.basicConfig()

    parser = get_arg_parser_with_db('CTF Gameserver Checker Master')
    parser.add_argument('--ippattern', type=str, required=True,
                        help="python formatstring to build IP to connect to")

    group = parser.add_argument_group('statedb', 'Checker state database')
    group.add_argument('--statedbname', type=str, required=True,
                       help='Name of the used database')
    group.add_argument('--statedbuser', type=str, required=True,
                       help='username for database access')
    group.add_argument('--statedbpassword', type=str,
                       help='password for database access if needed')
    group.add_argument('--statedbhost', type=str,
                       help='hostname of the database. If unspecified '
                            'ctf-submission will connect via default UNIX socket')

    group = parser.add_argument_group("checker")
    group.add_argument("--maxtasks", type=int, required=True,
                       help="maximum number of checkers to run in parallel")
    group.add_argument("--minstart", type=int, required=True,
                       help="minimum number of checkers to start per iteration")
    group.add_argument("--maxstart", type=int, required=True,
                       help="maximum number of checkers to start per iteration")
    group.add_argument("--refresh", type=float, required=True,
                       help="time between checking the database for new jobs in seconds")
    group.add_argument("--checker", type=str, required=True,
                       help="module:Class of the checker")
    group.add_argument("--service", type=str, required=True,
                       help="name of the service")
    parser.add_argument('--secret', type=str, required=True,
                        help="base64 random string consistent with checkers")

    group = parser.add_argument_group('logging', 'Checker script logging')
    group.add_argument('--journald', action='store_true', help='Let checker scripts log to journald with an '
                                                               'identifier per service, team and tick')
    group.add_argument('--gelf-server', help='Let checker scripts log to the specified GELF (Graylog) '
                                             'server ("<host>:<port>")')

    args = parser.parse_args()

    numeric_level = getattr(logging, args.loglevel.upper())
    logging.getLogger().setLevel(numeric_level)

    logging.debug("connecting to game database")
    gamedb = psycopg2.connect(host=args.dbhost,
                              database=args.dbname,
                              user=args.dbuser,
                              password=args.dbpassword)

    logging.debug("connecting to cache database")
    statedb = psycopg2.connect(host=args.statedbhost,
                               database=args.statedbname,
                               user=args.statedbuser,
                               password=args.statedbpassword)

    with gamedb:
        with gamedb.cursor() as cursor:
            global conteststart, flagvalidity, tickduration, serviceid
            cursor.execute("""SELECT start, valid_ticks, tick_duration
                              FROM scoring_gamecontrol""")
            conteststart, flagvalidity, tickduration = cursor.fetchone()
            cursor.execute("""SELECT id FROM scoring_service WHERE name = %s""",
                           (args.service,))
            serviceid, = cursor.fetchone()

    signal.signal(signal.SIGUSR1, handle_stop)

    loop = asyncio.get_event_loop()
    loop.call_soon(get_fresh_jobs, gamedb, statedb, args)

    daemon.notify("READY=1")

    loop.run_forever()

if __name__ == '__main__':
    main()
