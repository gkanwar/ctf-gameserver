#!/usr/bin/env python3

import logging
import argparse
import importlib
import sys
import socket
import requests
import resource

from requests.adapters import TimeoutSauce
class MyTimeout(TimeoutSauce):
    def __init__(self, *args, **kwargs):
        connect = kwargs.get('connect', 10.0)
        if connect is None:
            connect = 10.0
        read = kwargs.get('read', connect)
        if read is None:
            read = 10.0
        total = kwargs.get('total', connect)
        if total is None:
            total = 10.0
        super(MyTimeout, self).__init__(connect=connect, read=read, total=total)


def run(args):
    socket.setdefaulttimeout(10.0)
    requests.adapters.TimeoutSauce = MyTimeout

    if args.benchmark:
        res_baseline = resource.getrusage(resource.RUSAGE_SELF)

    logging.debug("Importing checker")
    checkermod, checkerclass = args.checker.split(":")
    checkermod = importlib.import_module(checkermod)
    checkerclass = getattr(checkermod, checkerclass)

    logging.debug("Initializing checker")
    checker = checkerclass(args.tick, args.team, args.service, args.ip)
    result = checker.run()

    if args.benchmark:
        res_finished = resource.getrusage(resource.RUSAGE_SELF)
        res_children = resource.getrusage(resource.RUSAGE_CHILDREN)
        logging.info("Resource usage during checker run:")
        logging.info("    utime: %d", res_finished.ru_utime - res_baseline.ru_utime + res_children.ru_utime)
        logging.info("    stime: %d", res_finished.ru_stime - res_baseline.ru_stime + res_children.ru_stime)
        logging.info("    additional maxrss: %d", res_finished.ru_maxrss - res_baseline.ru_maxrss + res_children.ru_maxrss)
        logging.info("    nvcsw: %d", res_finished.ru_nvcsw - res_baseline.ru_nvcsw + res_children.ru_nvcsw)
        logging.info("    ru_oublock: %d", res_finished.ru_oublock - res_baseline.ru_oublock + res_children.ru_oublock)
        logging.info("    ru_inblock: %d", res_finished.ru_inblock - res_baseline.ru_inblock + res_children.ru_inblock)

    if 0 == result:
        print("OK")
    elif 1 == result:
        print("TIMEOUT")
    elif 2 == result:
        print("NOTWORKING")
    elif 3 == result:
        print("NOTFOUND")
    elif 4 == result:
        print("RECOVERING")
    else:
        print("UNKNOWN RESULT: {}".format(result))
    sys.stdout.flush()


class CheckMetadataFilter(logging.Filter):

    def __init__(self, checker, team, tick):
        super().__init__()
        self.checker = checker
        self.team = team
        self.tick = tick

    def filter(self, record):
        record.checker = self.checker
        record.team = self.team
        record.tick = self.tick
        return True


def main():
    logging.basicConfig()
    parser = argparse.ArgumentParser(description="CTF checker runner")
    parser.add_argument('checker', type=str,
                        help="module:classname of checker")
    parser.add_argument('--service', type=int, required=True)
    parser.add_argument('--ip', type=str, required=True)
    parser.add_argument('--tick', type=int, required=True)
    parser.add_argument('--team', type=int, required=True)
    parser.add_argument('--benchmark', action='store_true')
    parser.add_argument('-v', '--loglevel', default='WARNING', type=str,
                        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],
                        help='Loglevel')
    parser.add_argument('--journald', action='store_true')
    parser.add_argument('--gelf-server')

    args = parser.parse_args()

    numeric_level = getattr(logging, args.loglevel.upper())
    logging.getLogger().setLevel(numeric_level)

    if args.journald:
        try:
            from systemd.journal import JournalHandler
        except ImportError:
            logging.error('systemd module is required for journald logging')
            sys.exit(1)

        identifier = "%s-team%03d-tick%03d" % (args.checker, args.team, args.tick)
        logging.root.addHandler(JournalHandler(SYSLOG_IDENTIFIER=identifier,
                                               CTF_TEAM_ID=args.team,
                                               CTF_TICK=args.tick))
    if args.gelf_server is not None:
        try:
            import graypy
        except ImportError:
            logging.error('graypy module is required for GELF logging')
            sys.exit(1)

        try:
            gelf_host, gelf_port = args.gelf_server.rsplit(':', 1)
            gelf_port = int(gelf_port)
        except ValueError:
            logging.error('GELF server needs to be specified as "<host>:<port>"')
            sys.exit(1)

        gelf_handler = graypy.GELFHandler(gelf_host, gelf_port)
        logging.getLogger().addHandler(gelf_handler)
        # TODO: Do we always want to do this, or just for GELF?
        logging.getLogger().addFilter(CheckMetadataFilter(args.checker, args.team, args.tick))

    run(args)

if __name__ == '__main__':
    main()
