#!/usr/bin/env python3

import argparse
import logging
import json
import os

import psycopg2
import psycopg2.extras

from ctf_gameserver.lib.args import get_arg_parser_with_db


SERVICES = {
    1: "JODLGANG",
    2: "Cryptocurrencies helpline",
    3: "Diagon Alley",
    4: "FAUST Coin",
    5: "MtCamlX",
    6: "RESTchain",
    7: "The Tangle",
}


def process_row(row, result):
    service = SERVICES[row.service_id]

    if not service in result:
        result[service] = dict()

    if not row.team_id in result[service]:
        result[service][row.team_id] = dict()

    result[service][row.team_id][row.identifier] = row.data.tobytes().decode()


def clean_dict(result):
    result = result.copy()
    for service in result:
        for team_id in result[service]:
            last5 = sorted(result[service][team_id].items())[-5:]
            result[service][team_id] = [ i[1] for i in last5 ]

    return result


def update_flagids(db, fname):
    result = dict()
    with db:
        with db.cursor(cursor_factory=psycopg2.extras.NamedTupleCursor) as cursor:
            cursor.execute("SELECT service_id, format('10.66.%s.2', team_id) as team_id, data, identifier FROM checkercache WHERE identifier LIKE 'flagid_%'")
            rows = cursor.fetchall()
            for row in rows:
                process_row(row, result)

    result = clean_dict(result)

    with open("%s.tmp" % fname, "w") as fh:
        json.dump(result, fh, indent=2)
    os.rename("%s.tmp" % fname, fname)


def main():
    logging.basicConfig()

    parser = get_arg_parser_with_db('CTF Gameserver flag ID helper')
    parser.add_argument('--output', type=str, required=True,
                        help="location where flagid file will be written to")
    args = parser.parse_args()

    numeric_level = getattr(logging, args.loglevel.upper())
    logging.getLogger().setLevel(numeric_level)

    db = psycopg2.connect(host=args.dbhost,
                          database=args.dbname,
                          user=args.dbuser,
                          password=args.dbpassword)

    update_flagids(db, args.output)


if __name__ == '__main__':
    main()
